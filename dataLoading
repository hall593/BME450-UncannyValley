import os
import torch
import pandas as pd
import matplotlib.pyplot as plt
from torch.utils.data import Dataset, DataLoader
from torchvision.transforms import ToTensor
from torchvision.io import read_image

data = pd.read_csv(r"C:\Users\macke\Downloads\Labelled Data.csv")
labels = pd.DataFrame(data, columns = ['Binary'])
imgDirectory = pd.DataFrame(data, columns = ['Image'])
# WORKS

class CustomDataSet(Dataset):
    # identifying
    def __init__self(self, labels, imgDirectory, transform = None, target_transform = None):
        # Initializaation
        self.labels = labels
        self.imgDirectory = imgDirectory
        self.transform = transform
        self.target_transform = target_transform

    def __len__(self):
        # Denotes total num of samples
        return len(self.labels)
    
    def __getitem__(self, index):
        # Generates one samples of data
        img_path = os.path.join(self.imgDirectory, self.labels.iloc[index, 0])  # might pose a problem depending on image path in 'data' variable
        image = read_image(img_path)
        imglabel = self.labels.iloc[index, 1]
        if self.transform:
            image = self.transform(image)
        if self.target_transform:
            label = self.target_transform(label)
        return image, label




'''
training_data = datasets.FashionMNIST(
    root="location of where data is stored",
    train=True,
    transform=ToTensor()
)

test_data = datasets.FashionMNIST(
    root="location of where data is stored",
    train=False,
    transform=ToTensor()
)

class CustomImageDataset(Dataset):
    def __init__(self, annotations_file, img_dir, transform = None, target_transform = None):
        self.img_labels = pd.read_csv(annotations_file)
        self.img_dir = img_dir
        self.transform = transform
        self.target_transform = target_transform

        def __len__(self):
            return len(self.img_labels)
        
        def __getitem__(self, idx):
            img_path = os.path.join(self.img_dir, self.img_labels.iloc[idx, 0])
            image = read_image(img_path)
            label = self.img_labels.iloc[idx, 1]
            if self.transform:
                image = self.transform(image)
            if self.target_transform:
                label = self.target_transform(label)
            return image, label


train_dataloader = DataLoader(training_data, batch_size=64, shuffle=True)
test_dataloader = DataLoader(test_data, batch_size=64, shuffle=True) 

# Display image and label.
train_features, train_labels = next(iter(train_dataloader))
print(f"Feature batch shape: {train_features.size()}")
print(f"Labels batch shape: {train_labels.size()}")
img = train_features[0].squeeze()
label = train_labels[0]
plt.imshow(img, cmap="gray")
plt.show()
print(f"Label: {label}") 
'''